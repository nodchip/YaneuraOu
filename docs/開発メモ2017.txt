# ToDO

- 自己対戦フレームワーク、改良する。
- 詰将棋探索エンジン、他の探索部から呼び出せるように改良する。
- PPAP評価関数
- elmoの学習ルーチン、取り込む。
- 読み太のソースコード調査する。
- 技巧2のソースコード調査する。


## 2017/05/14

・Bitboardクラス、リファクタリング。
	- enemy_field、Bitboardを別途用意した。
	- Bitboard::test()追加。
	- Bitboard::extract64(),insert64()追加。
	- FOREACH_BB、修正。

Total time (ms) : 24892
Nodes searched  : 20361112
Nodes/second    : 817978

// 速くなっているかは微妙だがxmmレジスタをいったんストアしてないだけマシだと思うことにする。

Total time (ms) : 25446
Nodes searched  : 86563443
Nodes/second    : 3401848
Nodes searched(main thread) : 11001396
Nodes/second  (main thread) : 432342

Bitboardクラス、もう少しソースコードを整理したほうが良いと思うが、キリがないので今回はこれくらいにしておく。


## 2017/05/13

・V4.52ではConsiderBookMoveCountが無視されていた模様。これはV4.54で修正されている。
	まふ定跡の選択がおかしかった件はこれのようだ。
	https://github.com/yaneurao/YaneuraOu/pull/24#issuecomment-301193795

・配布している実行ファイルで同じ定跡の指し手が選ばれる問題
	  // std::random_device rd; s = (u64)rd() + ((u64)rd() << 32);
	  // msys2のgccでbuildすると同じ値を返すっぽい。なんぞこれ…。
	random_device使わないようにする。

・定跡選択部、リファクタリング。

・定跡部で指し手を選ぶ時に、いくつからいくつに減らしたかを出力するようにした。


## 2017/05/12

- 定跡の指し手の選択部、リファクタリング。

- 比較実験用のKKPT型評価関数追加。
	- nps、5%ぐらいしか変わらない。メモリレイアウトが悪いのか…。元がAVX2用のコードだし、そのせいもあるのか…。

- rootMoves、上位にPIECE入ってないのでは。
	- 入ってる。
		Move ttMove = RootNode ? thisThread->rootMoves[thisThread->PVIdx].pv[0]
	- ああ、 MemoryBook::find()で
		m.bestMove = pos.move16_to_move(m.bestMove);
		してた。そうか。これは全エディション共通か。

- Stockfish最新版にキャッチアップ
	- Default argument for see_ge()
		- https://github.com/official-stockfish/Stockfish/commit/0c1f119069bf915b85126159d4865c4bcc532239
	- Remove int to int conversion, unused include.
		- https://github.com/official-stockfish/Stockfish/commit/99d914985f6ddb1ee22b232d41f17a35e1d34f89
	- Move Pieces[] out of global visibility
		- https://github.com/official-stockfish/Stockfish/commit/25296547d0258f8519b7614e4474bbc947eaea04
		- 使ってないから関係なさげ。
	- Avoid *begin always being included in the sorted list regardless of its value.
		- https://github.com/official-stockfish/Stockfish/commit/321a27fbe3b5af9961b99585ddd365a9cc855e38
	- use int16_t for histories
		- https://github.com/official-stockfish/Stockfish/pull/1113
			nps、0.5%ぐらい上がるらしい。


## 2017/05/11


- alignas必要のないときにつけないようにする。
	- しなくていいらしい。
	- ARM用のコンパイル、コンパイルオプションによっては
		alignasがついているとbus errorになるらしいが…。
		(たぶんコンパイラのバグ)


## 2017/05/10


・定跡を選択するときのConsiderBookMoveCountの処理が間違っていたので修正。
	- 定跡選択部自体をリファクタリングしたほうがいいような気はするが…。


・王手のかかっている局面をPosition::set_from_packed_sfen()で読むと状態が不正になる
	- https://github.com/yaneurao/YaneuraOu/issues/27


・Learner::qsearch() および Learner::search() でnullポインタアクセスする件修正。(thx. tanuki-さん)
	- https://github.com/yaneurao/YaneuraOu/issues/26


- gccでコンパイル、-fltoを指定するとセグフォで落ちる件、調査する。
	- あと、strip試す

	- USER_ENGINEにして、EVAL_NO_USEでも実行した途端にセグフォ。そんな馬鹿な…。
	- make nosseでビルドしてもセグフォ。
	- オプション指定するところ間違えてた…。修正した。
	- nosseでは32bit用バイナリを生成しようと思ったが、-m32を指定するとコンパイルエラーが出て、
	大変そうなのでこれ指定するのやめる。


- 評価関数ファイルの自動判定機能追加。
		{ 0x7171a5469027ebf , "ShinYane(20161010)" } ,
		{ 0x71fc7fd40c668cc , "Ukamuse(sdt4)"      } ,

		{ 0x65cd7c55a9d4cd9 , "elmo(WCSC27)"       } ,
		{ 0x3aa68b055a020a8 , "Yomita(WCSC27)"     } ,
		{ 0x702fb2ee5672156 , "Qhapaq(WCSC27)"     } ,
		{ 0x6c54a1bcb654e37 , "tanuki(WCSC27)"     } ,


// eval = elmo(WCSC27)
Total time (ms) : 26151
Nodes searched  : 20361112
Nodes/second    : 778597

// flto,PGOあり。
Total time (ms) : 25944
Nodes searched  : 20361112
Nodes/second    : 784810

// flto
Total time (ms) : 24836
Nodes searched  : 20361112
Nodes/second    : 819822

// PGOあまり意味なさげ

// VC++2017
Total time (ms) : 27416
Nodes searched  : 20361112
Nodes/second    : 742672
Nodes/second    : 751249
// gccのほうが5%ぐらい速いのかも知れん。

// gcc + nosse
Nodes searched  : 20361112
Nodes/second    : 585998

## 2017/05/09

- pull req取り込む。
	- 全部なんとかした。

- 読み筋出力がおかしいらしい件、調査する。
	- V4.50で解決しているらしい。調査おわり。

- 定跡データベースの採択率に比例して指し手を選択するオプション追加
	- https://github.com/yaneurao/YaneuraOu/pull/24/files


- Apery定跡データベース読み込みルーチン
	- まふ定跡を読み込むためにAperyの定跡DBを読み込む機能が必要らしい。
	- https://github.com/yaneurao/YaneuraOu/pull/23

- _mm_malloc()やめてposix_memalign()使う件
	- #include <cstdlib>  // posix_memalign()
	- これやっているのに
		エラー	C3861	'posix_memalign': 識別子が見つかりませんでした
	- よくわかんない。あれれ？
	- Windows環境では使えないような…。
		- http://stackoverflow.com/questions/33696092/whats-the-correct-replacement-for-posix-memalign-in-windows

- 魔女
	- msys2で
		make -j8 bmi2
	でビルドできた。あれれ…そうなのか…。


## 2017/05/08

- Position::piece_bb、やはり大改造することにした。

Total time (ms) : 34291
Nodes searched  : 26014961
Nodes/second    : 779147
Nodes/second    : 793962

// gcc
Total time (ms) : 33368
Nodes searched  : 26014961
Nodes/second    : 777936
Nodes/second    : 773311

// 前の
Nodes/second    : 766724
Nodes/second    : 781511
Nodes/second    : 793163


- mm_alloc()より、posix_memalign()使うほうがいいらしい。
	- http://kawa0810.hateblo.jp/entry/20120430/1335775256

- VC++2017のPGO
	- https://docs.microsoft.com/ja-jp/windows/uwp/debug-test-perf/pgo-for-uwp
	- pgo140rt.dllが無い。うーん？
	- C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.10.25017\bin\HostX64\x64 にあった。
	- evaluate_kppt_learn.cppが内部コンパイルエラーになる(´；ω；｀)　こら、どうもならん..
	- EVAL_LEARNをundefしとけばPGO出来た。肝心のnpsはほぼ変わらず…。なんなんこれ…。


## 2017/05/07

- 検討モードの読み筋に関する修正。(thanks! tさん)
	- cf. http://yaneuraou.yaneu.com/2017/05/06/%e3%82%84%e3%81%ad%e3%81%86%e3%82%89%e7%8e%8b%e3%81%a7%e8%aa%ad%e3%81%bf%e7%ad%8b%e3%81%8c%e6%95%b0%e6%89%8b%e3%81%97%e3%81%8b%e8%a1%a8%e7%a4%ba%e3%81%95%e3%82%8c%e3%81%aa%e3%81%84%e3%81%93%e3%81%a8/#comment-13392


- 魔女がgccの最新版でコンパイル通らない件

	DBL_MINを使ってあるので、common.hppで
	#include <cfloat>
	する。

	gotoで未初期化の変数がある。
	search.cppの469行付近の
	bool isbook = false;
	を455行らへんに移動する。

	pull req.したほうがいいか？

- Positionクラスのリファクタリング
	- 駒種別のbitboard、先後まぜこぜにしたの、1手詰めが遅くなるので善悪は微妙か。
	- 1手詰めを考慮すると、駒種別にbitboardがあっても良いような気がしてきた。うーん、そうか…。大改造になるな…。
	→　少しやってみたが、むしろ遅くなりそう..


## 2017/05/07

・ShogiGUIの検討モードできちんと読み筋が出力されるように修正。go infiniteのときはPvの出力を減らさないほうが良いのでは…。
> position startpos moves 2g2f 3c3d 2f2e 2b3c 7g7f 3a2b 3i4h 4a3b 3g3f 8c8d 6i7h 8d8e 4h3g 8e8f 8g8f 8b8f P*8g 8f8e 3g4f 7a6b 5i6i 7c7d 5g5f 3c8h+ 7i8h 2b3c 8h7g 6c6d 7g6f 6b6c 5f5e 6a5b B*5f 8a7c 8i7g 8e8a 3f3e 3d3e 4f3e 7d7e 6f7e 7c6e 7g6e 6d6e 3e4f P*7d 7e8f 5a6b 5f4e 4c4d 4e2g 4d4e 2g4e 3c4d 4e1h P*4e N*5f 3b4c 5f4d 4c4d 4f5g 5c5d 5e5d B*5e S*5c 5b5c 5d5c+ 6b5c 4g4f P*5f 5g5f 5e4f G*3g 4f5g+ 3g4g 5g4g 5f4g N*5g 6i7i 5g4i+ 2i3g 2a3c P*3d 4d3d 2e2d

あー、わかった。
	lastInfoTime + pv_interval < Time.elapsed()
これ、
	lastInfoTime + pv_interval <= Time.elapsed()
こう書かないと連続してPV出力できないということでは…。


- Positionクラスのリファクタリング
	- AperyのsetPiece()方式にしたほうが良いのでは…。
	- PieceTypeBitboardを廃止してGoldのBitobard追加したほうが良いのでは…。
	- 利きもがらっと変わるし、大改造になるな…。
	- ソースコードは少しシンプルになるが速度的にはほぼ変わらないか、むしろ遅くなるような気がしてきた。ツライ。
	- まずは、occupied[COLOR_ALL]の更新だけ分離する。
	- あとで大幅にいじる。変更後に探索ノードが変わるので自己対戦のためのが必要だから、この修正は落ち着いてから。



## 2017/05/06

・benchコマンド用の局面1つ追加。> startpos moves 2g2f 3c3d 2f2e 2b3c 7g7f 4c4d 3i4h 8c8d
	- 1.1Mnpsぐらい出る。VC++でコンパイルされた魔女とほぼ同じ。

・ChangedBonaPieceを用意してデータ構造変更。
Total time (ms) : 33403
Nodes searched  : 26014961
Nodes/second    : 778821

・USE_TT_PV、デフォルトでオンに変更する。検討モードが使いにくすぎ。
	- https://twitter.com/mizumon_/status/860566849007763456

	- TT.probe()でgenerationが新しくなるので探索node数が変わってしまう。
	またbench時のこのタイミングが異なるのでbenchごとにnode数が変わってしまう…。不便だなぁ…。
	→　bench対策した。

・思考エンジン名にevalフォルダ名を含めないとevalフォルダを変更したときにきちんと選ばれているのかわかりづらい
	evalのchecksumは出力しているのでそれを確認すればいいか…。うーん？
	checksumごとに代表的なソフト名(評価関数名)を出力するだとか？考えとく。


## 2017/05/05

- MovePickerの配列、よく考えたらtoがSQ_NBであるような指し手を渡すことはないので
		int table[SQ_NB + 7][SQ_NB][COLOR_NB];
でいい。修正。

- もしかして、positionクラスで、
	Bitboard piece_bb[PIECE_TYPE_BITBOARD_NB][COLOR_NB];
	色別に持たないほうが良いのでは…。大改造になるが高速化のために変更してみる。

- piece_bb[][]を直接参照しているところをPosition::pieces()経由でアクセスするように変更。

// 改良前
Total time (ms) : 32729
Nodes searched  : 26014961
Nodes/second    : 794859

// 改良後
Total time (ms) : 32437
Nodes searched  : 26014961
Nodes/second    : 802015

// gccでbuildした場合。2%ぐらい速いかも？
Total time (ms) : 31770
Nodes searched  : 26014961
Nodes/second    : 818853


// 4 threads
Total time (ms) : 28682
Nodes searched  : 66869828
Nodes/second    : 2331421
Nodes searched(main thread) : 16690131
Nodes/second  (main thread) : 581902

// 8 threads
Total time (ms) : 27703
Nodes searched  : 90831960
Nodes/second    : 3278777
Nodes searched(main thread) : 11602893
Nodes/second  (main thread) : 418831

遅くはなっていないが4Tにしたときに4倍のnps出てないのおかしくないか？
2Tにした時点で700k/tぐらいしか出ない。うーん..

### V4.44

engine1 = YaneuraOuV440.exe , eval = ShinYane20161117
engine2 = YaneuraOuV444.exe , eval = ShinYane20161117
T1,b1000,1733 - 86 - 1711(50.32% R2.22) win black : white = 50.78% : 49.22%

たぶん計測誤差。何も変わってない。


## 2017/05/04

・Stockfish
	- Fix multiPV issue #502
		- https://github.com/official-stockfish/Stockfish/commit/8b15961349e18a9ba113973c53f53913d0cd0fad

・search()でalpha値を更新したときに詰み探索を呼ぶほうが良いだとか？


						// PvNodeでalpha値を更新したときにここが最善応手列になるので
						// ここで1手進めてから詰み探索を呼ぶ。
#if 1
						if (!RootNode && is_ok(bestMove))
						{
							// mate_depth = 1 or 3 or 5
							int mate_depth = min(5, depth / (4 * ONE_PLY) * 2 + 1);
							if (mate_depth >= 3)
							{
								pos.do_move(bestMove, st);
								move = pos.weak_mate_n_ply(mate_depth);
								pos.undo_move(bestMove);

								if (move != MOVE_NONE)
								{
									// N手詰めかも知れないのでmate_depth手詰めのスコアを返す。
									bestValue = mated_in(ss->ply + 1 + mate_depth);

#if !defined(DISABLE_TT_PROBE)
									tte->save(posKey, value_to_tt(bestValue, ss->ply), BOUND_EXACT,
										DEPTH_MAX, move, /* ss->staticEval */ bestValue, TT.generation());
#endif
									return bestValue;
								}
							}
						}
#endif


上のコード追加してもほぼ弱くならない。
これは、PvNodeの全体に占める割合が極めて小さいから。
PvNodeで相手からの詰みを調べたほうが良いかと思ったが、そうでもない。
Pv自体が枝刈りしまくった結果の産物で、信用ならないからかも知れない。

いずれにせよ、もう少しきちんと書くべき。詰み探索を調べたかどうかをTTに書くべきだろうし。
あと、もっと投機的に詰み探索などを呼ぶ仕組みを入れたほうが良いと思う。
reductionをthread idごとにバラけさせるだとか…。
いずれにせよ、TT拡張すること考えたほうが良さげ。

・benchコマンドのデフォルト設定、早く終わりすぎて役目を果たしていないのでdepth15から17に条件を変更。


## 2017/05/04

・置換表にEVAL_HASH突っ込んだほうがいいのでは…。
	- 手番があるから手番違いが同じエントリーに来なくてまずいのか？
	- 手番なしkeyでlookupしてTTEntryを
		hashkey        :  2byte
		EvalSum        : 12byte*2
		DATA for black :  8byte(gen8,depth8,move16,value16,mate8,progress8)
		DATA for white :  8byte(gen8,depth8,move16,value16,mate8,progress8)
			mate8 = N手詰めを調べたときに記入しておく
			progress8 = 進行度の計算用
		= 2 + 12*2 + 8*2 = 36 bytes
	これが3つでTTCluster、みたいなエントリー構造にしたらいいのか…。んで2発prefetchしておくと。
	many coreでnps 2,3割ぐらい上がるかも知れんが、大改造だな…。
	
	EvalHashに対してprefetchするほうがシンプルだな。そうしよう。

### V4.41

engine1 = YaneuraOuV439.exe , eval = ShinYane20161117
engine2 = YaneuraOuV440.exe , eval = ShinYane20161117
T1,b1000,2265 - 107 - 2628(46.29% R-25.82) win black : white = 50.91% : 49.09%
T4,b1000,633 - 81 - 686(47.99% R-13.97) win black : white = 52.29% : 47.71%
T4,b3000,1050 - 178 - 1222(46.21% R-26.35) win black : white = 52.19% : 47.81%

engine1 = gikou_win_20160606/gikou.exe , eval = dummy
engine2 = YaneuraOuV440.exe , eval = ShinYane20161117
T4,b2000,1075 - 22 - 2773(27.94% R-164.62) win black : white = 52.09% : 47.91%


## 2017/05/03その2

・Stockfishのpull req.
	- Remove excluded move from TT position key formula. 
		- https://github.com/official-stockfish/Stockfish/pull/1096/files

### V4.40

engine1 = YaneuraOuV439.exe , eval = ShinYane20161117
engine2 = YaneuraOuV440.exe , eval = ShinYane20161117
T1,b1000,2429 - 107 - 2464(49.64% R-2.49) win black : white = 53.23% : 46.77%
T1,b3000,1754 - 138 - 1668(51.26% R8.73) win black : white = 52.0% : 48.0%

誤差の範疇？



## 2017/05/03

・探索部、Stockfishのsearch.cppに書式をなるべく合せる。
・Reductionテーブルの初期化コード、ONE_PLYを掛けるように修正。Stockfish本家のほうも同様の修正が必要だと思う…。
・check_time()の呼び出すコード、修正。(npsが出なかったの、これが原因か？)
・#ifndef、紛らわしいので#if !defined()に変更する。
・qsearch()の1手詰め、置換表にhitしなかったときにのみ調べるように変更。

### V4.39

engine1 = YaneuraOuV431.exe , eval = ShinYane20161117
engine2 = YaneuraOuV439.exe , eval = ShinYane20161117
T4,b1000,1718 - 174 - 3108(35.6% R-102.98) win black : white = 50.87% : 49.13%
T4,b5000,120 - 17 - 253(32.17% R-129.58) win black : white = 53.33% : 46.67%
T4,b5000,116 - 26 - 228(33.72% R-117.39) win black : white = 55.17% : 44.83%

バグ取れた関係か、ずいぶん強くなってる。


## 2017/05/02

・Stockfish最新版にキャッチアップ

	- Partial insertion sort
		- https://github.com/official-stockfish/Stockfish/commit/2d96e8fbe9b683ff320a197715155381139c7664
		- std::partitionが安定ソートではないし遅いので自前で用意する。
	- Use int instead of Value for history related stats.
		- https://github.com/official-stockfish/Stockfish/commit/9da3b44ddc7bc9ea7094b91663cbc0f8319c46be
		- ExtMoveのvalueはValue型にしておくと-VALUE_INFINITE,VALUE_INFINITEから容易にはみだすのでint型に変更。
	- simplify logic for history based pruning
		- https://github.com/official-stockfish/Stockfish/commit/ced29248c93de7fc5a4e284807f8f052006e647c
		- historyの未初期化のところを-1にしておくことで、history > 0を条件にすれば未初期化のところは
		- 自然と除外されるというhack。
	- King safety parameters improved
		- https://github.com/official-stockfish/Stockfish/commit/0868de705df796b9b9803bd393f4f27c3f4ed772
		- 将棋に関係ない。
	- Sort moves partially: linear depth dependence
		- https://github.com/official-stockfish/Stockfish/commit/6b9a22b40d37d27ad10cafd8697d96e90a586f8a
		-  partial_insertion_sort(cur, endMoves, -4000 * depth / ONE_PLY)
	- Assorted code style issues
		- https://github.com/official-stockfish/Stockfish/commit/b48439e90643cb6f65f9e34d1421976883c12efc
		- 変数名など。
	- Zero unused constant
		- https://github.com/official-stockfish/Stockfish/commit/d06a8d0c188b796e115d503f85906fadb5625c70
	- Copy killers in the movepicker
		- https://github.com/official-stockfish/Stockfish/commit/b1b19343cd1f5ec65084dc11a0a0b4d5ece2a24b
		- movepicker.h/cpp、最新のStockfishに合せた。
	- Retire the misdesigned StepAttacks[] array.
		- https://github.com/official-stockfish/Stockfish/commit/e06a117d5e78ec4edc051f2b161d36559f784d37
		- StepAttacksが設計ミスだったらしい。やねうら王には影響なさげ。
	- Don't do InCheck Pruning at the root of QS
		- https://github.com/official-stockfish/Stockfish/commit/a18c2c2c3f38070cb897a8a28cf1d6d45236ded4
		- 静止探索のrootでは王手枝刈りをしない。
	- gcc 7 port
		- https://github.com/official-stockfish/Stockfish/commit/e9f26cccdde7ca6e0941bb4b9066665a68c5bc42
		- gcc7用に、movepicker.cppに[[fallthrough]]のアノテーションをつける。

### V4.38

engine1 = YaneuraOuV431.exe , eval = ShinYane20161117
engine2 = YaneuraOuV438.exe , eval = ShinYane20161117
T1,b1000,2303 - 85 - 2612(46.86% R-21.87) win black : white = 52.24% : 47.76%



## 2017/04/25

・スタックサイズ100MBにしているが、これを小さくしたほうが数%速くなるようではある。
・EVAL_LEARNをundefしたほうが数%速くなるようではある。
・プロジェクトの設定でデバッグ情報の生成をONにしていたのでこれをOFFに変更した。
・Console出力が詰まってbenchの値がおかしいのか？



## 2017/04/22

・Learner::search()に何らかバグがあるらしいので調査。



## 2017/04/21

・対技巧でパラメーターチューニング
z:\script>c:/Python27/python.exe analyze_result_log.py ../result_log
....................................................................................................
  total : 3394 - 32 - 1574(68.32% R133.48)
PARAM_PROBCUT_DEPTH:
  4 : 1142 - 13 - 552(67.41% R126.29)
  5 : 1078 - 11 - 492(68.66% R136.26)
  6 : 1174 - 8 - 530(68.9% R138.16)
PARAM_PROBCUT_MARGIN:
  212 : 678 - 6 - 305(68.97% R138.77)
  214 : 675 - 8 - 312(68.39% R134.06)
  216 : 662 - 8 - 323(67.21% R124.66)
  218 : 682 - 4 - 333(67.19% R124.54)
  220 : 697 - 6 - 301(69.84% R145.87)
PARAM_PRUNING_BY_HISTORY_DEPTH:
  8 : 1149 - 9 - 517(68.97% R138.73)
  9 : 1145 - 11 - 545(67.75% R128.96)
  10 : 1100 - 12 - 512(68.24% R132.85)
PARAM_REDUCTION_ALPHA:
  127 : 646 - 4 - 330(66.19% R116.69)
  129 : 641 - 6 - 335(65.68% R112.73)
  131 : 684 - 6 - 299(69.58% R143.75)
  133 : 696 - 6 - 309(69.25% R141.06)
  135 : 727 - 10 - 301(70.72% R153.19)
PARAM_FUTILITY_MOVE_COUNT_ALPHA0:
  238 : 714 - 6 - 319(69.12% R139.96)
  239 : 658 - 8 - 298(68.83% R137.6)
  240 : 696 - 9 - 304(69.6% R143.89)
  241 : 708 - 3 - 319(68.94% R138.5)
  242 : 618 - 6 - 334(64.92% R106.9)
PARAM_FUTILITY_MOVE_COUNT_ALPHA1:
  498 : 686 - 4 - 348(66.34% R117.9)
  499 : 632 - 9 - 333(65.49% R111.31)
  500 : 645 - 6 - 282(69.58% R143.72)
  501 : 732 - 8 - 323(69.38% R142.12)
  502 : 699 - 5 - 288(70.82% R154.03)
PARAM_FUTILITY_MOVE_COUNT_BETA0:
  736 : 654 - 3 - 302(68.41% R134.23)
  738 : 683 - 6 - 334(67.16% R124.27)
  740 : 644 - 6 - 310(67.51% R127.01)
  742 : 692 - 14 - 303(69.55% R143.47)
  744 : 721 - 3 - 325(68.93% R138.42)
PARAM_FUTILITY_MOVE_COUNT_BETA1:
  996 : 684 - 8 - 318(68.26% R133.05)
  998 : 648 - 10 - 321(66.87% R122.03)
  1000 : 708 - 7 - 304(69.96% R146.86)
  1002 : 680 - 2 - 281(70.76% R153.52)
  1004 : 674 - 5 - 350(65.82% R113.84)

### V4.35

チューニング完了。

・チューニング後、対技巧 4スレ5秒。
total : 4033 - 34 - 1625(71.28% R157.91)



Ryzen 8コア(論理16コア)にて

// prefetchなし

Total time (ms) : 61094
Nodes searched  : 27207336
Nodes/second    : 445335

> bench 1024 16
Total time (ms) : 44258
Nodes searched  : 179667725
Nodes/second    : 4059553
Nodes searched(main thread) : 11324212
Nodes/second  (main thread) : 255868

// prefetchあり

Total time (ms) : 58355
Nodes searched  : 27207336
Nodes/second    : 466238

> bench 1024 16
Total time (ms) : 54807
Nodes searched  : 226393803
Nodes/second    : 4130746
Nodes searched(main thread) : 11923099
Nodes/second  (main thread) : 217547

// eval hash、prefetchあり

Total time (ms) : 57458
Nodes searched  : 27207336
Nodes/second    : 473516

> bench 1024 16

Total time (ms) : 31393
Nodes searched  : 148282761
Nodes/second    : 4723433
Nodes searched(main thread) : 9249663
Nodes/second  (main thread) : 294640

Total time (ms) : 28043
Nodes searched  : 129733738
Nodes/second    : 4626243
Nodes searched(main thread) : 8099409
Nodes/second  (main thread) : 288821

// eval hash、prefetch有効のほうがいいかも知れん..


## 2017/04/21

・EngineNuma、やはり設定できないと、他ソフトの対局のときにNuma指定できなくて困るのか…。あらら？
	→　そうでもないか。

		start /B /WAIT /NODE %EXECUTOR_NUMBER% c:/python27/python.exe %YANEHOME%\script\engine_invoker4.py home:%YANEHOME% engine1:%ENGINE1% eval1:%EVAL1%  engine2:%ENGINE2% eval2:%EVAL2% cores:%HT_CORES% loop:%LOOP% numa:%EXECUTOR_NUMBER% engine_threads:%ENGINE_THREADS% hash1:%ENGINE_HASH1% hash2:%ENGINE_HASH2% time:%TIMES% book_moves:%BOOK_MOVES% rand_book:1 PARAMETERS_LOG_FILE_PATH:%YANEHOME%\result_log\param_%BUILD_NUMBER%
		start /B /WAIT /NODE %EXECUTOR_NUMBER% move *.sfen %YANEHOME%\kif

・TTのprefetch、追加する

- 4771

// prefetchなし
===========================
Total time (ms) : 18180
Nodes searched  : 12421760
Nodes/second    : 683265
Nodes/second    : 706785
Nodes/second    : 717688

// prefetchあり
Nodes/second    : 721105
Nodes/second    : 724343

// prefetchあり、eval hashあり
Nodes searched  : 12421760
Nodes/second    : 699738
Nodes/second    : 692637

> bench 1024 8 16
Total time (ms) : 24520
Nodes searched  : 74895345
Nodes/second    : 3054459
Nodes searched(main thread) : 9394930
Nodes/second  (main thread) : 383153
Nodes searched(main thread) : 9924828
Nodes/second  (main thread) : 378781

Nodes searched(main thread) : 10324092
Nodes/second  (main thread) : 384409
Nodes searched(main thread) : 20745383
Nodes/second  (main thread) : 353895

// lazy SMPで伸びないのはeval hashの都合もあるのか…。

// eval hashをONにするとめっちゃ遅い。なんで？
Nodes searched(main thread) : 12163807
Nodes/second  (main thread) : 260852

// eval hashのkeyを計算する部分、これだと2個に1個が無駄になってる
-		const Key keyExcludeTurn = st->key() & ~1; // 手番を消した局面hash key
+		const Key keyExcludeTurn = st->key() >> 1; // 手番を消した局面hash key
修正。

eval hash、20%もhitしてるのに遅いな…。
hitしたあとの差分計算が出来てなかったり？

// st->sumと書いていたところsumに変更した。

Nodes searched(main thread) : 8100708
Nodes/second  (main thread) : 401223
// よくわからない。あとでRyzenでベンチとる。


### V4.32

・Ryzenでベンチとる。(あとで)


## 2017/04/19

- Singular extension and check extension tweak
	- https://github.com/official-stockfish/Stockfish/commit/30c583204f97da2c67b5042c30327013e70ae209

- Skip quiet moves based on moveCount pruning threshold and history stats
	- https://github.com/official-stockfish/Stockfish/commit/352bd6f5aa348e15909f50266fc5bdc003df35bf

- Penalty for a quiet ttMove that fails low
	- https://github.com/official-stockfish/Stockfish/commit/5254a6040c59cf7d3b9faa847168ccbd628c0574

- Simplify skipping of plies with helper threads
	- https://github.com/official-stockfish/Stockfish/commit/1810c4d758674dc4de288ca782851e52874f8908

- Further simplify skipping of plies with threads
	- https://github.com/official-stockfish/Stockfish/commit/cc76524c2e36345fcbf5fcdd3618a5dafd166b62

- Check for overflow in Score * int multiplication
	- https://github.com/official-stockfish/Stockfish/commit/d2971f3fca929d9085ed17b71aa4ec8e96499d99
	- 序盤と終盤のスコア内分してないのでこれ意味ないな…。

- Prefer std::find over a hand-coded loop
	- https://github.com/official-stockfish/Stockfish/commit/57a3334322df005d567fc7db9afef82c495df83d

- Move-Count Formula Tweak
	- https://github.com/official-stockfish/Stockfish/commit/9d3ed9ed2ef97fda99183c1290fd4f51dac55180

// 以上で、最新のStockfish(2017/4/18)に追いついた。

### V4.31

engine1 = YaneuraOuV426.exe , eval = ShinYane20161117
engine2 = YaneuraOuV431.exe , eval = ShinYane20161117
T1,b1000,2540 - 86 - 2374(51.69% R11.74) win black : white = 52.87% : 47.13%
T4,b1000,1238 - 104 - 1308(48.63% R-9.55) win black : white = 50.32% : 49.68%

1スレッドで負け越したの少し気になるが。探索パラメーター、再度調整すべき。


## 2017/04/18

- Penalty for a quiet ttMove that fails low
	- https://github.com/official-stockfish/Stockfish/commit/5254a6040c59cf7d3b9faa847168ccbd628c0574

				// fails lowのときのquiet ttMoveに対するペナルティ
				else if (!pos.capture_or_promotion(ttMove))
				{
					Value penalty = -stat_bonus(depth);
					thisThread->history.update(pos.side_to_move(), ttMove, penalty);
					update_cm_stats(ss, pos.moved_piece_after(ttMove), to_sq(ttMove), penalty);
				}

- update_cm_stats() 書き換え
- HistoryStats削除
- history周り、大改造。

- Standardize stat penalty
	- https://github.com/official-stockfish/Stockfish/commit/35b77b120ef5ca5d9db848e02e42642b1a93e982

- Always have counterMoves associated
	- https://github.com/official-stockfish/Stockfish/commit/d490bb99734bd6e2f8a0a352d2f3f1ba264ece66

- Allow pruning advance pawn pushes if not near endgame
	- https://github.com/official-stockfish/Stockfish/commit/3627348e2b4633604a878b0e5397acb6218a6afc
	- 将棋では関係なさげ。

- Remove HistoryStats
	- https://github.com/official-stockfish/Stockfish/commit/e0504ab876a997321102f040ab88203cb893db12

- Rename FromTo -> History
	- https://github.com/official-stockfish/Stockfish/commit/34e47ca87d82a420043f2bc9a1960eb1fad5c4f4

- Simplify TT penalty stat
	- https://github.com/official-stockfish/Stockfish/commit/fa24cc25a43da5ac41a086edda02dfc2e8e9b830

### V4.30

	engine1 = YaneuraOuV426.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV430.exe , eval = ShinYane20161117
	T1,b1000,2357 - 79 - 2564(47.9% R-14.62) win black : white = 51.21% : 48.79%
	T4,b1000,1892 - 124 - 2044(48.07% R-13.42) win black : white = 51.22% : 48.78%

## 2017/04/18

- Removing CM parameter from the Stats struct. 
	- https://github.com/official-stockfish/Stockfish/commit/99cd513264be1ad61848bbefd678be0feaa08061

- A small tweak in doEasyMove()
	- https://github.com/official-stockfish/Stockfish/commit/a753e20bd4fc1e916f7e99884c01bb63fd7c1326
	- 影響は軽微で検証できない。

- search(): Move nullValue variable into local scope
	- https://github.com/official-stockfish/Stockfish/commit/83fb4547f640c63c2dbbf0d5637bd8d1cf216a60
	- すでにこうしてた。

- Drop Stats c'tors
	- https://github.com/official-stockfish/Stockfish/commit/3ab3e55bb5faf57aec864f3bb7268601c11d72be
	- スレッドオブジェクト生成のときにヒープがゼロクリアされているならコンストラクタでゼロクリアは不要なのだが。

- Razor Simplification
	- https://github.com/official-stockfish/Stockfish/commit/05cf45f2d137600387d5e560e22a464a84ad7b0d
	- razoringのところの
			&&  ttMove == MOVE_NONE
	を削除。

- Introduce assert for stats update
	- https://github.com/official-stockfish/Stockfish/commit/c5de4080dba8e9b3248f06bd6c168c22e9fbfd92

- Don't update TT at excluded move ply
	- https://github.com/official-stockfish/Stockfish/commit/ebe021f6a5da63cf0e31da89d4c21e9b5f673fcd

- Fix zugzwang pruning issues
	- https://github.com/official-stockfish/Stockfish/commit/72a501c6fe5e4e7b61291e9603d0c6cc0902e618
	- これ将棋で関係なさげ。
		&& pos.non_pawn_material(pos.side_to_move())


### V4.29

	engine1 = YaneuraOuV426.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV429.exe , eval = ShinYane20161117
	T1,b1000,2545 - 108 - 2347(52.02% R14.07) win black : white = 51.63% : 48.37%
	T4,b1000,1986 - 132 - 1722(53.56% R24.78) win black : white = 50.65% : 49.35%

	counter moveのところのパラメーター変更になった影響で、全パラメーターを再調整しないと
	弱くなったままのような気がする…。あとで再調整する。


## 2017/04/17

- Ryzenに向けた最適化
	- AVX2用のevaluate()でも速度はほぼ変わらず。(AVX2用ではないほうが速いようだが)
	- attackers_to()がどうも遅い。原因はよくわからない。機を改めて調査する。

- attackers_to()のColorを取らないバージョン、バグってた。see_ge()実装以降バグっていたのか。修正。[1秒で+R25]
	- T1,b1000,910 - 51 - 1049(46.45% R-24.69)


- Help GCC to optimize msb() to single instruction
	- https://github.com/official-stockfish/Stockfish/commit/bf8b45fe6305c89a9a30f660de34164cf3bdcdf2

- Simplify pruning rule
	- https://github.com/official-stockfish/Stockfish/commit/e70da0d2eb20cffee505c4e7ef61399de7d3fa16
	- これ、このあと修正があるので採用せず。

- Another simplification for SEE pruning
	- https://github.com/official-stockfish/Stockfish/commit/8c61bbda54b0ec06cb05b89db4342d890dd21798

	// 浅い深さでの、危険な指し手を枝刈りする。
	else if (	depth < 7 * ONE_PLY
			&& !extension
			&& !pos.see_ge(move, Value(-PawnValue * (depth / ONE_PLY))))
			continue;

	→　YaneuraOuV426a , R50ぐらい弱くなった。なんぞこれ…。

- Use DEPTH_ZERO initializer for depth in qsearch 
	- https://github.com/official-stockfish/Stockfish/commit/ee22b61f5e90a180af942828feb83cef90ea5683
	- 強さには寄与せず

- Remove piece condition in decrease lmr reduction check
	- https://github.com/official-stockfish/Stockfish/commit/46d066b04190763339d5ede87018422a1ab7c7dc

		else if (!is_drop(move) // type_of(move)== NORMAL
	//	&& type_of(pos.piece_on(to_sq(move))) != PAWN

	→　YaneuraOuV426b

	engine1 = YaneuraOuV426b.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV426.exe , eval = ShinYane20161117
	T1,b1000,2480 - 101 - 2419(50.62% R4.33) win black : white = 51.98% : 48.02%

- piecesCount
	- https://github.com/official-stockfish/Stockfish/commit/f72b7dc99af07c4f012ef229f9d3dcc490d6d69f
	- 将棋では関係なさげ。

- Explicitly use alpha+1 for beta in NonPV search
	- https://github.com/official-stockfish/Stockfish/commit/af7412e58a4ce374b5035d9bb1e8c47a108ff352
	- NonPVなのでalpha == beta - 1なので、明示的にalphaを用いる。強さには寄与しない。

- Clean-up skipEarlyPruning 
	- https://github.com/official-stockfish/Stockfish/commit/1b62d413c137bfa669922b6d52b92262d60020f1
	- 関数の引数のリファクタリング。強さには寄与しない。

- Simplify pruning
	- https://github.com/official-stockfish/Stockfish/commit/847bc0e80fa78a81b028515da03a90ea4dd40458
	- あとで変更があるのでこれは無視。

	engine1 = YaneuraOuV426c.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV426.exe , eval = ShinYane20161117
	T1,b1000,2441 - 90 - 2469(49.71% R-1.98) win black : white = 52.15% : 47.85%
	T1,b3000,2445 - 146 - 2409(50.37% R2.58) win black : white = 51.21% : 48.79%


### V4.28

- Simplify threshold handling for probcut.
	- https://github.com/official-stockfish/Stockfish/commit/1ceaea701baaa79f378b0842ff0fb5d2a1f53ef7
	- 影響は軽微。

- Refactor bonus and penalty calculation
	- https://github.com/official-stockfish/Stockfish/commit/a47bbca0ea40ac007d64682c3ba51fa4158b2d3f
	- あとで再度調整があるので、これは採用しない。

- Threefold repetition detection
	- https://github.com/official-stockfish/Stockfish/commit/881a9dfb0a8fec3b1472791e2d98415e4a9a182a
	- 千日手チェックの高速化だが、これと同等のことはすでにやっているので採用せず。

- Don't clear EasyMove in search()
	- https://github.com/official-stockfish/Stockfish/commit/b7b9d7c9c72a987bb497ec2b629d885a06238aa2

- Tweak best thread selection logic
	- https://github.com/official-stockfish/Stockfish/commit/1052ce74f65479e5d583d349227dc101f8483a85
- Simplified select best thread 
	- https://github.com/official-stockfish/Stockfish/commit/d39ffbeea6ad54c90123a352d50b65c5bda1561b
	- これ、複数スレッドでないと動作検証できない。


- Use consistent variable names for counterMoveStats 
	- https://github.com/official-stockfish/Stockfish/commit/6b16ebc82566a69b9336cca6aa7a19ab1824b85d
	- 名前の変更だけ。

- Correct zero-init of Thread data members
	- https://github.com/official-stockfish/Stockfish/commit/fe99de20ff8f0594a17e2cedf680d25e86dd5a13
	- 影響なし。

- Zero init fromToStats in constructor. 
	- https://github.com/official-stockfish/Stockfish/commit/90b052462cc473ee03df0e1613d1c9f81ca99887
	- あまり影響はないが、以下の部分、コメントアウトした。
		//	th->fromTo.clear();

- Correctly zero-initialize MainThread
	- https://github.com/official-stockfish/Stockfish/commit/1c316c41bb0b3a1522aecd0dd2447009f976ebd7
	- もとより、こんなことはしてなかった。

	engine1 = YaneuraOuV428.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV426.exe , eval = ShinYane20161117
	T1,b1000,2444 - 83 - 2473(49.71% R-2.05) win black : white = 52.5% : 47.5%

// スレッド増やすと落ちる。何故？あとで調査する。
// →　投了のbestmove resignが返ってこない。
// →　main thread以外、resignの指し手をrootMovesにpushしてないからアクセス違反になってた。修正。

	position startpos moves 2g2f 3c3d 2f2e 2b3c 7g7f 3a2b 6i7h 4a3b 3i4h 8c8d 8h3c+ 2b3c 7i8h 7c7d 3g3f 7a6b 4g4f 5a4b 4h4g 8a7c 9g9f 6c6d 8h7g 6b6c 2i3g 1c1d 2h2i 8b8a 1g1f 9c9d 4i4h 6a6b 5i4i B*6i 7h8h 7c6e 7g6f 8d8e B*6h 8e8f 6h8f 6i4g+ 4h4g S*8e 8f5i 8e7f 4i5h 7f8g P*8b 8a8b B*7a 8b8c 7a6b+ 8g8h+ G*8d 8c8b 6b7c 8b8a 7c6c 8a8d 3g4e G*5b 4e5c+ 5b5c S*5a 4b5a 6c7c 5a4b 7c8d 4b3a 4g3g 3a2b 8i7g 3d3e 7g6e 6d6e 2e2d 2c2d N*4e 3e3f 4e3c+ 2a3c 3g3f S*3h 2i2d P*2c 2d7d 6e6f P*3d S*4g 5h6h G*7h 7d7h 8h7h 6h7h 6f6g+ 7h8g 4g3f 3d3c+ 3b3c P*3d 3c3d N*2f 5c4d 2f3d 4d3d R*5b G*3b S*4a P*3a 4a3b+ 3a3b S*3a 2b1c 5b3b+ R*8i P*8h 8i5i+ 3b3d 6g7g 8g8f 7g7f 8f7f P*7e 8d7e B*5h P*6g N*8d 7e8d 5i7i P*7g N*6d 7f6e N*7c 8d7c 5h4g+ 6e6d 4g4f 6d5c S*6d 7c6d 4f6d 5c6d B*2h 6d5c 2h6d+ 3d6d P*5b 5c4b P*3d B*3c 1d1e 3a2b 1c1b G*1c
	go btime 0 wtime 0 byoyomi 3000


	engine1 = YaneuraOuV426.exe , eval = ShinYane20161117
	engine2 = YaneuraOuV428c.exe , eval = ShinYane20161117
	T4,b1000,971 - 62 - 1037(48.36% R-11.42) win black : white = 51.6% : 48.4%

